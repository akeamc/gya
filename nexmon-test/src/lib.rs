use std::ffi::{CStr, CString};

use nexmon_test_sys::{unpack_float_acphy, wiros_parse_csi};
use num_complex::Complex;

pub fn acphy(input: &[u8]) -> Vec<Complex<f64>> {
    let nfft = input.len() / 4;
    let mut h_out = vec![0; nfft * 2];
    unsafe {
        // unpack_float_acphy(10, 0, 0, 1, 12, 6, *nfftp, H, Hout);
        unpack_float_acphy(
            10,
            0,
            0,
            12,
            6,
            nfft as _,
            input.as_ptr().cast(),
            h_out.as_mut_ptr(),
        );
    }
    h_out
        .chunks_exact(2)
        .map(|v| Complex::new(v[0] as _, v[1] as _))
        .collect::<Vec<_>>()
}

pub fn wiros(input: &[u8]) -> Vec<Complex<f64>> {
    let n_sub = input.len() / 4;
    let mut r_out = vec![0.0; n_sub];
    let mut i_out = vec![0.0; n_sub];
    unsafe {
        wiros_parse_csi(
            n_sub as _,
            input.as_ptr().cast(),
            r_out.as_mut_ptr(),
            i_out.as_mut_ptr(),
        );
    }
    r_out
        .iter()
        .zip(i_out.iter())
        .map(|(r, i)| Complex::new(*r, *i))
        .collect::<Vec<_>>()
}

pub fn chanspec_aton(a: &str) -> u16 {
    let input = CString::new(a).unwrap();
    unsafe { makecsiparams_sys::wf_chspec_aton(input.as_ptr()) }
}

pub fn chanspec_ntoa(chspec: u16) -> String {
    let mut buf = [0; makecsiparams_sys::CHANSPEC_STR_LEN as usize];
    unsafe {
        makecsiparams_sys::wf_chspec_ntoa(chspec, buf.as_mut_ptr());
    }
    let cstr = unsafe { CStr::from_ptr(buf.as_ptr()) };
    cstr.to_string_lossy().into_owned()
}

#[cfg(test)]
mod tests {
    use csi::{
        ieee80211::{Band, Bandwidth},
        params::ChanSpec,
    };

    use super::*;

    #[test]
    fn test_unpack_float_acphy() {
        const SAMPLE: [u8; 1024] = [
            33, 12, 15, 15, 0, 182, 182, 188, 185, 0, 0, 0, 241, 143, 251, 16, 242, 79, 254, 56,
            242, 223, 124, 19, 246, 215, 47, 23, 55, 4, 219, 5, 54, 240, 243, 1, 246, 177, 115, 36,
            118, 123, 71, 40, 246, 93, 199, 42, 182, 86, 107, 46, 246, 67, 227, 51, 54, 13, 123,
            59, 247, 74, 82, 49, 119, 18, 112, 51, 183, 129, 44, 51, 246, 218, 93, 63, 119, 58, 81,
            41, 183, 82, 157, 33, 119, 52, 177, 5, 246, 218, 221, 21, 246, 39, 157, 26, 118, 144,
            124, 26, 182, 42, 80, 23, 54, 2, 24, 20, 246, 9, 90, 19, 118, 30, 114, 21, 182, 99,
            162, 24, 118, 237, 146, 26, 118, 153, 155, 23, 177, 47, 254, 62, 119, 66, 19, 32, 55,
            46, 203, 39, 182, 184, 251, 59, 119, 111, 246, 48, 183, 3, 58, 48, 182, 145, 220, 57,
            182, 216, 28, 50, 245, 186, 133, 54, 245, 135, 217, 46, 181, 86, 77, 44, 53, 86, 21,
            44, 117, 156, 113, 43, 118, 4, 153, 35, 246, 54, 241, 0, 118, 71, 49, 8, 118, 30, 145,
            16, 118, 173, 124, 23, 182, 9, 80, 26, 182, 159, 150, 23, 54, 20, 155, 16, 246, 65,
            207, 7, 182, 38, 47, 0, 53, 203, 211, 40, 53, 75, 255, 43, 181, 3, 235, 43, 180, 217,
            179, 55, 242, 87, 1, 2, 243, 203, 125, 33, 243, 79, 1, 0, 242, 63, 1, 13, 50, 56, 251,
            24, 244, 59, 191, 1, 244, 3, 255, 7, 243, 39, 191, 2, 178, 111, 3, 51, 179, 55, 125,
            27, 244, 81, 227, 38, 118, 81, 92, 17, 54, 18, 26, 16, 117, 170, 54, 25, 181, 217, 30,
            18, 116, 145, 147, 26, 244, 114, 15, 25, 52, 178, 227, 26, 53, 50, 175, 13, 117, 169,
            123, 9, 182, 2, 3, 0, 182, 9, 115, 38, 53, 183, 215, 57, 182, 124, 158, 49, 182, 5, 42,
            51, 118, 112, 68, 49, 245, 140, 165, 56, 53, 226, 61, 44, 181, 206, 149, 0, 181, 113,
            21, 10, 116, 228, 113, 28, 116, 7, 113, 29, 52, 111, 108, 24, 180, 80, 208, 20, 180,
            104, 24, 22, 180, 53, 252, 28, 117, 63, 154, 18, 243, 155, 253, 38, 245, 126, 207, 12,
            181, 224, 131, 0, 117, 189, 191, 46, 53, 33, 7, 59, 53, 43, 102, 63, 53, 190, 20, 59,
            117, 70, 221, 47, 245, 77, 17, 36, 116, 245, 61, 7, 52, 39, 81, 11, 179, 121, 189, 12,
            51, 233, 205, 5, 116, 105, 13, 8, 52, 114, 17, 22, 245, 91, 4, 19, 117, 95, 186, 21,
            181, 39, 123, 15, 117, 130, 219, 1, 181, 70, 35, 45, 117, 124, 190, 53, 117, 107, 40,
            52, 53, 4, 133, 42, 53, 14, 169, 1, 244, 77, 105, 19, 52, 73, 76, 21, 243, 121, 170,
            25, 242, 215, 129, 2, 48, 32, 251, 27, 178, 247, 131, 36, 241, 175, 251, 20, 50, 16,
            121, 51, 242, 167, 254, 51, 242, 167, 253, 35, 178, 151, 129, 10, 177, 111, 254, 62,
            241, 15, 252, 30, 243, 107, 253, 38, 54, 31, 119, 0, 245, 146, 99, 52, 181, 62, 230,
            59, 53, 232, 80, 51, 53, 59, 249, 33, 244, 82, 229, 21, 180, 102, 250, 21, 52, 52, 75,
            33, 244, 85, 78, 58, 116, 207, 37, 60, 117, 197, 153, 0, 117, 169, 177, 24, 54, 51, 48,
            21, 182, 186, 6, 21, 246, 118, 175, 10, 54, 157, 75, 37, 54, 20, 251, 50, 246, 40, 6,
            56, 246, 171, 180, 50, 182, 11, 97, 39, 53, 189, 133, 6, 117, 185, 120, 16, 180, 123,
            158, 22, 116, 17, 235, 37, 52, 10, 68, 62, 245, 28, 205, 48, 51, 136, 190, 18, 54, 35,
            125, 9, 246, 191, 212, 20, 54, 16, 194, 26, 54, 254, 242, 23, 182, 173, 191, 12, 54,
            220, 243, 34, 54, 122, 123, 49, 182, 170, 122, 57, 118, 53, 200, 56, 246, 212, 184, 48,
            53, 242, 221, 43, 53, 94, 1, 4, 243, 207, 37, 28, 50, 101, 215, 51, 245, 0, 52, 49, 53,
            255, 152, 57, 118, 41, 9, 42, 182, 167, 101, 0, 54, 175, 81, 15, 118, 34, 21, 29, 119,
            18, 40, 18, 183, 123, 238, 16, 246, 210, 215, 22, 183, 23, 103, 3, 54, 254, 15, 41,
            182, 94, 247, 51, 178, 199, 255, 63, 50, 32, 126, 27, 177, 191, 254, 54, 242, 247, 252,
            16, 50, 136, 251, 31, 51, 136, 124, 49, 179, 171, 188, 30, 243, 67, 59, 19, 244, 7,
            129, 0, 243, 27, 61, 40, 178, 191, 3, 39, 183, 32, 131, 41, 247, 195, 226, 48, 55, 57,
            18, 52, 55, 81, 88, 50, 54, 86, 161, 57, 118, 139, 221, 44, 246, 81, 37, 35, 117, 219,
            9, 1, 245, 102, 93, 34, 117, 139, 161, 40, 54, 34, 117, 36, 182, 144, 193, 0, 246, 193,
            25, 12, 118, 134, 137, 25, 119, 107, 76, 18, 183, 21, 110, 20, 119, 155, 150, 18, 119,
            1, 243, 12, 183, 45, 107, 5, 247, 31, 191, 33, 118, 206, 127, 45, 54, 69, 51, 50, 54,
            221, 54, 50, 182, 180, 238, 48, 246, 177, 6, 50, 118, 179, 50, 54, 177, 127, 253, 27,
            55, 9, 212, 49, 247, 116, 20, 51, 183, 237, 204, 48, 247, 82, 225, 42, 183, 131, 113,
            34, 119, 117, 169, 6, 119, 40, 253, 13, 55, 186, 24, 18, 247, 75, 200, 18, 119, 9, 242,
            16, 54, 115, 206, 28, 246, 165, 58, 25, 118, 209, 202, 23, 118, 28, 111, 23, 182, 146,
            55, 21, 247, 11, 155, 7, 247, 61, 63, 2, 119, 75, 195, 36, 183, 36, 231, 43, 119, 210,
            138, 49, 119, 97, 210, 52, 55, 18, 192, 52, 183, 121, 4, 50, 182, 124, 245, 58, 54,
            186, 217, 48, 182, 178, 1, 40, 176, 127, 254, 63, 178, 127, 131, 45, 242, 231, 251, 12,
            49, 0, 251, 24, 241, 63, 252, 28,
        ];
        const N_SUBCARRIERS: usize = 64;

        let input = &SAMPLE[..N_SUBCARRIERS * 4];

        let a = acphy(input);
        let b = csi::frame::unpack_csi(input).collect::<Vec<_>>();

        assert_eq!(a, b);
    }

    #[test]
    fn test_chanspec() {
        let a = chanspec_aton("100/80");
        let b = ChanSpec::new(100, Band::Band5G, Bandwidth::Bw80).unwrap();

        assert_eq!(a, b.as_u16());
    }
}
